import pandas as pd
import numpy as np

#使用重构索引(reindexing)，创建了一个缺少值的DataFrame。在输出中，NaN表示不是数字的值
df = pd.DataFrame(np.random.randn(5,3),index=['a','c','e','f','h'],columns=['one','two','three'])
df = df.reindex(['a','b','c','d','e','f','g','h'])
print(df)
print('-----------------------------------------------------')
'''
        one       two     three
a  0.853445 -0.035747 -0.898015
b       NaN       NaN       NaN
c -0.667014  0.291916 -0.114132
d       NaN       NaN       NaN
e -0.360773 -0.557343 -1.062150
f -0.773930 -0.132331  0.961858
g       NaN       NaN       NaN
h -0.608909 -0.407710 -1.544803
'''

#检查缺失值
#为了更容易地检测缺失值(以及跨越不同的数组dtype)，Pandas提供了isnull()和notnull()函数，它们也是Series和DataFrame对象的方法
print(df['one'].isnull())
print('-----------------------------------------------------')
'''
a    False
b     True
c    False
d     True
e    False
f    False
g     True
h    False
Name: one, dtype: bool
'''

print(df['one'].notnull())
print('-----------------------------------------------------')
'''
a     True
b    False
c     True
d    False
e     True
f     True
g    False
h     True
Name: one, dtype: bool
'''

'''
缺少数据的计算
在求和数据时，NA将被视为0
如果数据全部是NA，那么结果将是NA
'''
print(df['one'].sum())
print('-----------------------------------------------------')
'''
2.610466378350923
'''

df = pd.DataFrame(index=[0,1,2,3,4,5],columns=['one','two'])
print(df['one'].sum())
print('-----------------------------------------------------')
'''
0
'''

#清理/填充缺少数据Pandas提供了各种方法来清除缺失的值。fillna()函数可以通过几种方法用非空数据“填充”NA值
#用标量值替换NaN
df = pd.DataFrame(np.random.randn(3,3), index=['a','c','e'],columns=['one','two','three'])
df = df.reindex(['a','b','c'])
print(df)
print('-----------------------------------------------------')
print("NaN replaced with '0':")
print(df.fillna(0))
print('-----------------------------------------------------')
'''
        one       two     three
a -0.373777  1.725441 -0.544334
b       NaN       NaN       NaN
c -0.563954 -0.333135  0.063196
-----------------------------------------------------
NaN replaced with '0':
        one       two     three
a -0.373777  1.725441 -0.544334
b  0.000000  0.000000  0.000000
c -0.563954 -0.333135  0.063196
'''

'''
填写NA前进和后退
方法               动作
pad/fill          填充方法向前
bfill/backfill   填充方法向后
'''
df = pd.DataFrame(np.random.randn(5,3), index=['a','c','e','f','h'],columns=['one','two','three'])
df = df.reindex(['a','b','c','d','e','f','g','h'])
print(df)
print('-----------------------------------------------------')
print(df.fillna(method='pad'))
print('-----------------------------------------------------')
'''
        one       two     three
a  0.506640 -0.324981 -0.984791
b       NaN       NaN       NaN
c  0.587184  1.870927 -0.152380
d       NaN       NaN       NaN
e  0.317880  0.222891 -0.552150
f -0.566182 -0.377815 -0.991402
g       NaN       NaN       NaN
h  0.497697 -1.970433 -1.738829
-----------------------------------------------------
        one       two     three
a  0.506640 -0.324981 -0.984791
b  0.506640 -0.324981 -0.984791
c  0.587184  1.870927 -0.152380
d  0.587184  1.870927 -0.152380
e  0.317880  0.222891 -0.552150
f -0.566182 -0.377815 -0.991402
g -0.566182 -0.377815 -0.991402
h  0.497697 -1.970433 -1.738829
'''

df = pd.DataFrame(np.random.randn(5,3), index=['a','c','e','f','h'],columns=['one','two','three'])
df = df.reindex(['a','b','c','d','e','f','g','h'])
print(df)
print('-----------------------------------------------------')
print(df.fillna(method='bfill'))
print('-----------------------------------------------------')
'''
        one       two     three
a  0.434467  1.302405 -1.054237
b       NaN       NaN       NaN
c  0.560232 -1.627745  1.235357
d       NaN       NaN       NaN
e -0.053018 -1.532945 -0.424535
f  0.451175 -0.201967  0.464717
g       NaN       NaN       NaN
h -0.883782 -0.971476 -0.661106
-----------------------------------------------------
        one       two     three
a  0.434467  1.302405 -1.054237
b  0.560232 -1.627745  1.235357
c  0.560232 -1.627745  1.235357
d -0.053018 -1.532945 -0.424535
e -0.053018 -1.532945 -0.424535
f  0.451175 -0.201967  0.464717
g -0.883782 -0.971476 -0.661106
h -0.883782 -0.971476 -0.661106
'''

#丢失缺少的值如果只想排除缺少的值，则使用dropna函数和axis参数。 默认情况下，axis = 0，即在行上应用，这意味着如果行内的任何值是NA，那么整个行被排除
df = pd.DataFrame(np.random.randn(5,3), index=['a','c','e','f','h'],columns=['one','two','three'])
df = df.reindex(['a','b','c','d','e','f','g','h'])
print(df)
print('-----------------------------------------------------')
print (df.dropna())
print('-----------------------------------------------------')
'''
        one       two     three
a -1.345644 -0.399873  0.108138
b       NaN       NaN       NaN
c -0.533314  0.070316  0.967865
d       NaN       NaN       NaN
e  1.121752  0.610961  0.623120
f  0.934715 -1.930900  0.441098
g       NaN       NaN       NaN
h -0.524697 -0.187826  0.913717
-----------------------------------------------------
        one       two     three
a -1.345644 -0.399873  0.108138
c -0.533314  0.070316  0.967865
e  1.121752  0.610961  0.623120
f  0.934715 -1.930900  0.441098
h -0.524697 -0.187826  0.913717
'''

df = pd.DataFrame(np.random.randn(5,3), index=['a','c','e','f','h'],columns=['one','two','three'])
df = df.reindex(['a','b','c','d','e','f','g','h'])
print(df)
print('-----------------------------------------------------')
print(df.dropna(axis=1))
print('-----------------------------------------------------')
'''
        one       two     three
a -0.684096  0.906787 -0.189502
b       NaN       NaN       NaN
c  0.509826  0.333664  0.063625
d       NaN       NaN       NaN
e  2.274763 -0.061384  0.314540
f  1.293382 -0.189233  0.551595
g       NaN       NaN       NaN
h -1.081423  0.026851  0.463602
-----------------------------------------------------
Empty DataFrame
Columns: []
Index: [a, b, c, d, e, f, g, h]
'''

#替换丢失(或)通用值很多时候，必须用一些具体的值取代一个通用的值。可以通过应用替换方法来实现这一点。用标量值替换NA是fillna()函数的等效行为
df = pd.DataFrame({'one':[10,20,30,40,50,2000],'two':[1000,0,30,40,50,60]})
print(df)
print('-----------------------------------------------------')
print(df.replace({1000:10,2000:60}))
print('-----------------------------------------------------')
'''
    one   two
0    10  1000
1    20     0
2    30    30
3    40    40
4    50    50
5  2000    60
-----------------------------------------------------
   one  two
0   10   10
1   20    0
2   30   30
3   40   40
4   50   50
5   60   60
'''