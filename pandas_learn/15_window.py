import pandas as pd
import numpy as np

#.rolling()函数用于一系列数据。指定window=n参数并在其上应用适当的统计函数
df = pd.DataFrame(np.random.randn(10,4),index=pd.date_range('1/1/2020',periods=10),columns=['A','B','C','D'])
print(df)
print('-----------------------------------------------------')
#由于窗口大小为3(window)，前两个元素有空值，第三个元素的值将是n，n-1和n-2元素的平均值。这样也可以应用上面提到的各种函数了
print(df.rolling(window=3).mean())
print('-----------------------------------------------------')
'''
                   A         B         C         D
2020-01-01  0.000473  0.485173  1.769732 -0.203458
2020-01-02 -0.077932  0.301058 -0.804820  1.017486
2020-01-03  0.729225 -1.296929 -0.438002 -0.968369
2020-01-04 -0.189736 -0.696825  0.737410 -0.778855
2020-01-05 -0.453455  0.364711 -0.947683  0.631159
2020-01-06 -1.561310  1.663498  1.774224  0.564084
2020-01-07 -0.234944  0.495120 -1.084886 -0.625508
2020-01-08  0.620432 -0.454375  0.707931 -0.155513
2020-01-09 -2.152412  0.451315  1.261917 -0.329616
2020-01-10 -0.818046 -0.753863  0.622656 -1.666139
-----------------------------------------------------
                   A         B         C         D
2020-01-01       NaN       NaN       NaN       NaN
2020-01-02       NaN       NaN       NaN       NaN
           #0.217255=(0.000473-0.077932+0.729225)/3
2020-01-03  0.217255 -0.170232  0.175637 -0.051447
           #0.153852=(-0.077932+0.729225-0.189736)/3
2020-01-04  0.153852 -0.564232 -0.168471 -0.243246
2020-01-05  0.028678 -0.543014 -0.216092 -0.372022
2020-01-06 -0.734834  0.443794  0.521317  0.138796
2020-01-07 -0.749903  0.841109 -0.086115  0.189912
2020-01-08 -0.391941  0.568081  0.465756 -0.072312
2020-01-09 -0.588974  0.164020  0.294987 -0.370213
2020-01-10 -0.783342 -0.252308  0.864168 -0.717089
'''

#.expanding()函数用于一系列数据。指定min_periods = n参数并在其上应用适当的统计函数
df = pd.DataFrame(np.random.randn(10,4),index=pd.date_range('1/1/2020',periods=10),columns=['A','B','C','D'])
print(df)
print('-----------------------------------------------------')
print(df.expanding(min_periods=3).mean())
print('-----------------------------------------------------')
'''
                   A         B         C         D
2020-01-01  1.393580  0.684655  0.329966 -1.256020
2020-01-02  1.575018  0.165201 -0.706499  1.364066
2020-01-03 -1.614179  0.686757 -0.158603  1.229507
2020-01-04  1.673792  0.024541  0.675296  3.430475
2020-01-05  0.348224  0.328148 -0.804421  0.797793
2020-01-06  0.294833 -0.051354 -2.473013  2.230910
2020-01-07 -0.742987 -0.745955  1.960916 -0.973597
2020-01-08 -0.702184  0.688925  1.805089  1.685003
2020-01-09 -0.483033  0.666063  0.961500 -2.671832
2020-01-10  1.670631  1.042273  0.001919 -0.171366
-----------------------------------------------------
                   A         B         C         D
2020-01-01       NaN       NaN       NaN       NaN
2020-01-02       NaN       NaN       NaN       NaN
           #0.451473=(1.393580+1.575018+-1.614179)/3
2020-01-03  0.451473  0.512204 -0.178379  0.445851
           #0.757053=(1.393580+1.575018+-1.614179+1.673792)/4
2020-01-04  0.757053  0.390288  0.035040  1.192007
2020-01-05  0.675287  0.377860 -0.132852  1.113164
2020-01-06  0.611878  0.306325 -0.522879  1.299455
2020-01-07  0.418326  0.155999 -0.168051  0.974734
2020-01-08  0.278262  0.222615  0.078591  1.063517
2020-01-09  0.193674  0.271887  0.176692  0.648478
2020-01-10  0.341369  0.348925  0.159215  0.566494
'''

'''
.ewm()函数ewm()可应用于系列数据。指定com，span，halflife参数，并在其上应用适当的统计函数。它以指数形式分配权重
com ：float，可选 根据质心指定衰减，α=1/(1+com), for com≥0。
span ：float，可选 根据范围指定衰减，α=2/(span+1), for span≥1。
halflife ：float，可选 根据半衰期指定衰减，α=1−exp(log(0.5)/halflife),forhalflife>0。
当adjust为True（默认）时，将使用权重(1-alpha)**(n-1),(1-alpha)**(n-2),…,1-alpha，1来计算加权平均值。
当adjust为False时，将按以下方式递归计算加权平均值：
weighted_average [0] = arg [0]; weighted_average [i] =(1-alpha)* weighted_average [i-1] + alpha * arg [i]。
'''
df = pd.DataFrame(np.random.randn(10,4),index=pd.date_range('1/1/2020',periods=10),columns=['A','B','C','D'])
print(df)
print('-----------------------------------------------------')
print(df.ewm(com=0.5,adjust=False).mean())
print('-----------------------------------------------------')
'''
                   A         B         C         D
2020-01-01  0.328548 -1.896676 -0.428368 -1.276236
2020-01-02 -0.327275  2.049622  1.021063 -1.029427
2020-01-03  1.787677 -0.763431 -0.503252  0.494796
2020-01-04  0.392708  0.535988  0.082160 -1.032537
2020-01-05 -1.027895  0.520349  1.634456  0.202629
2020-01-06 -0.501162  0.624413 -0.695945 -0.996002
2020-01-07  0.785202 -0.687338 -0.624621 -1.679389
2020-01-08  1.999832  0.123127  1.127612 -0.265658
2020-01-09  0.459557  2.008352 -0.245705  0.456384
2020-01-10 -1.309576 -0.756274 -0.017821 -0.357206
-----------------------------------------------------
                   A         B         C         D
2020-01-01  0.328548 -1.896676 -0.428368 -1.276236
2020-01-02 -0.163319  1.063047  0.658705 -1.091129
2020-01-03  1.187370 -0.201438 -0.145727  0.006819
2020-01-04  0.650973  0.296325  0.008097 -0.694746
2020-01-05 -0.472898  0.446291  1.096817 -0.094024
2020-01-06 -0.491766  0.565203 -0.099999 -0.696169
2020-01-07  0.359935 -0.270206 -0.449907 -1.351948
2020-01-08  1.453366 -0.007944  0.601932 -0.627645
2020-01-09  0.790793  1.336322  0.036812  0.095078
2020-01-10 -0.609477 -0.058766  0.000389 -0.206450
'''

