import pandas as pd
import numpy as np

# 管道
# 方法1声明操作函数
def adder(ele1,ele2):
    return ele1+ele2

myArray=np.random.randn(5,3)
print('原数组:')
print(myArray)
print('-----------------------------------------------------')
df = pd.DataFrame(myArray,columns=['col1','col2','col3'])
'''
旧版本做法
def adder(ele1,ele2):
    return ele1+ele2
df.pipe(adder,20)
'''
df=df.pipe(adder,20) # 方法1通过pipe调用操作函数，并设置叠加值
# df+=20 # 方法2直接将df叠加值即可，pandas最新管道用法
print('管道将DataFrame的所有元素叠加20:')
print(df)
print('-----------------------------------------------------')
'''
原数组:
[[ 1.00406302  0.64922631 -1.72281926]
 [ 0.67637528 -0.39112472 -0.61886036]
 [-0.20938885  0.40818149 -0.46934663]
 [ 0.16465592 -0.82867717 -0.6921699 ]
 [ 0.27675812 -0.63651761 -0.27280205]]
-----------------------------------------------------
管道将DataFrame的所有元素叠加20:
        col1       col2       col3
0  21.004063  20.649226  18.277181
1  20.676375  19.608875  19.381140
2  19.790611  20.408181  19.530653
3  20.164656  19.171323  19.307830
4  20.276758  19.363482  19.727198
'''

# 求均值
print('原数组:')
print(myArray)
print('-----------------------------------------------------')
df = pd.DataFrame(myArray,columns=['col1','col2','col3'])
df = df.apply(np.mean) # 列求均值
print('DataFrame列均值:')
print(df)
print('-----------------------------------------------------')
'''
原数组:
[[ 1.492591    1.03984673 -0.87186325]
 [ 0.21038906  0.93084484 -0.76955729]
 [-0.31556329 -0.57138669 -0.61485735]
 [-0.14745781  1.15871134 -1.26021428]
 [-1.09274391 -0.96032424 -1.36262843]]
-----------------------------------------------------
DataFrame列均值:
col1    0.029443
col2    0.319538
col3   -0.975824
dtype: float64
'''

df = pd.DataFrame(myArray,columns=['col1','col2','col3'])
df=df.apply(np.mean,axis=1) # 行求均值
print('DataFrame行均值:')
print(df)
print('-----------------------------------------------------')
'''
DataFrame行均值:
0    0.436536
1    0.185084
2    0.754582
3   -0.439071
4   -0.002605
dtype: float64
'''

# 通过lambda嵌入函数算法求解
df = pd.DataFrame(myArray,columns=['col1','col2','col3'])
df = df.apply(lambda x:x.max()-x.min()) # 列最大值减最小值
print('DataFrame列最大值减最小值:')
print(df)
print('-----------------------------------------------------')
'''
DataFrame列最大值减最小值:
col1    5.481405
col2    2.585624
col3    1.119673
dtype: float64
'''

df = pd.DataFrame(myArray,columns=['col1','col2','col3'])
df = df.apply(lambda x:x.max()-x.min(),axis=1) # 行最大值减最小值
print('DataFrame行最大值减最小值:')
print(df)
print('-----------------------------------------------------')
'''
DataFrame行最大值减最小值:
0    3.297952
1    1.585876
2    0.577658
3    1.893608
4    1.738437
dtype: float64
'''

#通过map函数仅对指定列运算
myArray=np.random.randn(5,3)
print(myArray)
df = pd.DataFrame(myArray,columns=['col1','col2','col3'])
df=df['col1'].map(lambda x:x*100)
print(df)
print('-----------------------------------------------------')
'''
[[ 0.1824888  -0.47239591 -0.85835963]
 [ 0.10371845  0.27781999  0.38021124]
 [ 1.15724588  0.09086528 -1.44918438]
 [-0.83914866  0.49126971 -0.14052899]
 [-0.68837016  0.44418257 -0.4717811 ]]
0     18.248880
1     10.371845
2    115.724588
3    -83.914866
4    -68.837016
Name: col1, dtype: float64
'''

#通过applymap函数对DataFrame所有可计算数据运算
df = pd.DataFrame(myArray,columns=['col1','col2','col3'])
df=df.applymap(lambda x:x*100) # 等同于用管道 df*=100
print(df)
'''
         col1        col2       col3
0   51.850101   72.099680   3.834801
1  100.851968  150.034949  85.127211
2  -80.600853  127.997829  78.155273
3  137.981648    4.560950 -14.879755
4 -169.833447 -126.981695  50.123554
'''