import pandas as pd
import numpy as np

#通过传递值列表来创建一个系列
s = pd.Series([1,3,5,np.nan,6,8])
print(s)
print('-----------------------------------------------------')
'''
0    1.0
1    3.0
2    5.0
3    NaN
4    6.0
5    8.0
dtype: float64
'''

#通过传递numpy数组，使用datetime索引和标记列来创建DataFrame
dates = pd.date_range('20200101', periods=7)
print(dates)
'''
np.random.randn(7,4) 生成7行4列正态分布数据
index=dates 以dates的日期作为索引
'''
df = pd.DataFrame(np.random.randn(7,4), index=dates, columns=['A','B','C','D'])
print(df)
print('-----------------------------------------------------')
'''
DatetimeIndex(['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04',
               '2020-01-05', '2020-01-06', '2020-01-07'],
              dtype='datetime64[ns]', freq='D')
                   A         B         C         D
2020-01-01  0.255067 -0.611892 -0.438114 -0.841299
2020-01-02 -0.836064  0.540854  0.175264 -0.543695
2020-01-03  1.428875 -1.509064  1.925948 -0.124036
2020-01-04  0.425737 -1.939047  0.746133 -0.198742
2020-01-05 -2.120614 -0.124829 -0.651514  0.009462
2020-01-06  0.925241 -0.580146 -0.177173  0.087447
2020-01-07  0.029837 -0.566881 -0.194107  1.002600
'''

#通过传递可以转换为类似系列的对象的字典来创建DataFrame
'''
pd.Categorical()生成类别型数据
'''
df2 = pd.DataFrame({ 'A' : 1.,
                     'B' : pd.Timestamp('20170102'),
                     'C' : pd.Series(1,index=list(range(4)),dtype='float32'),
                     'D' : np.array([3] * 4,dtype='int32'),
                     'E' : pd.Categorical(["test","train","test","train"]),
                     'F' : 'foo' })
print(df2)
print('-----------------------------------------------------')
'''
     A          B    C  D      E    F
0  1.0 2017-01-02  1.0  3   test  foo
1  1.0 2017-01-02  1.0  3  train  foo
2  1.0 2017-01-02  1.0  3   test  foo
3  1.0 2017-01-02  1.0  3  train  foo
'''

#查看框架的顶部和底部的数据行
print(df.head(3)) # 显示前3条数据
print('------分割线------')
print(df.tail(3)) # 显示后3条数据
print('-----------------------------------------------------')
'''
                   A         B         C         D
2020-01-01 -0.197571  0.909052 -1.465770 -1.068460
2020-01-02 -0.345546 -0.740857  0.508531  1.620924
2020-01-03  1.170288 -1.599256  0.428996  0.563939
------分割线------
                   A         B         C         D
2020-01-05  0.004883  1.407632  0.139812  0.139195
2020-01-06  1.165251 -0.927903 -0.031560 -0.779784
2020-01-07 -0.984709 -0.604848  0.279427 -0.218738
'''

#显示索引，列和底层numpy数据
print("索引:" )
print(df.index)
print("列:" )
print(df.columns)
print("numpy数据:" )
print(df.values)
print('-----------------------------------------------------')
'''
索引:
DatetimeIndex(['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04',
               '2020-01-05', '2020-01-06', '2020-01-07'],
              dtype='datetime64[ns]', freq='D')
列:
Index(['A', 'B', 'C', 'D'], dtype='object')
numpy数据:
[[ 0.43403053  0.12465022  1.49225057 -0.36174245]
 [ 0.03548945  1.04849969  0.55719879 -1.32362296]
 [ 0.83056415 -0.14657994 -0.15103459 -1.2432029 ]
 [-0.47370971  3.25502714 -2.10854158 -0.50231238]
 [ 0.6472402   0.45191907 -0.15241297 -1.12812293]
 [-1.98034996  0.74985065  2.12200171 -0.84610342]
 [-1.6108481   0.01968367  1.16120581 -2.14888349]]
'''

#显示数据的快速统计摘要
print(df.describe())
print('-----------------------------------------------------')
'''
              A         B         C         D
count  7.000000  7.000000  7.000000  7.000000  (数量)
mean   0.110257 -0.668994  0.046682 -0.018737  (平均值)
std    1.350230  1.450592  1.216581  0.735467  (标准差)
min   -1.706157 -2.604189 -1.296321 -1.274963  (最小值)
25%   -0.919234 -1.651157 -0.777423 -0.252068  (排序后第25%的数字)
50%    0.333070 -0.615446 -0.348257 -0.074789  (排序后第50%的数字)
75%    1.019516  0.295710  0.739067  0.359256  (排序后第75%的数字)
max    1.944317  1.247573  2.048061  1.004219  (最大值)
'''

#数据转置
print(df.T)
print('-----------------------------------------------------')
'''
   2020-01-01  2020-01-02  2020-01-03  ...  2020-01-05  2020-01-06  2020-01-07
A    0.669640    0.169910   -2.022786  ...   -0.117708    0.756555   -1.225111
B   -0.616320   -0.548113   -1.485563  ...   -0.959912    0.723957   -1.522511
C    1.563459    1.151837    1.823431  ...   -0.290223    0.895738    0.867278
D   -0.133203   -0.381930   -1.336665  ...   -1.076143   -0.731567   -0.694286

[4 rows x 7 columns]
'''

#轴排序
print(df.sort_index(axis=1, ascending=False)) # 列倒序
print('-----------------------------------------------------')
'''
                   D         C         B         A
2020-01-01  1.752317  1.204984 -1.626904  1.269511
2020-01-02  0.949699  0.484662  1.121010  2.146084
2020-01-03 -0.129508 -0.484662 -0.015572 -1.543390
2020-01-04  0.928493 -0.484877 -1.376380  2.774626
2020-01-05  1.814335 -0.864287 -0.299981 -0.284832
2020-01-06 -0.176838  0.276120  0.545819  0.607570
2020-01-07  0.299889 -0.454855  1.181298  1.007333
'''
print(df.sort_index(axis=0, ascending=False)) # 行倒序
print('-----------------------------------------------------')
'''
                   A         B         C         D
2020-01-07 -1.796417  0.079013  0.959915 -0.778620
2020-01-06  2.162261 -0.674010 -1.587794  0.527736
2020-01-05 -0.693335 -0.394371 -0.417322  0.039755
2020-01-04  2.342981 -0.520123  0.238539 -0.639049
2020-01-03 -1.850069 -0.749353 -0.790342 -0.572058
2020-01-02  1.254540  0.130567 -0.338192  1.586753
2020-01-01  0.901524  0.473548 -1.777042 -0.790704
'''

#值排序
print(df.sort_values(by='C')) #C列排序
print('-----------------------------------------------------')
'''
                   A         B         C         D
2020-01-06 -1.287683 -0.444592 -1.876735 -0.821923
2020-01-03  2.709172  1.785011 -0.821837 -0.407952
2020-01-04  0.952100  0.309339 -0.120153  0.930658
2020-01-02  0.569166  0.883558  0.077495 -1.155234
2020-01-05  1.604835  0.275332  0.101514  0.651926
2020-01-01  1.651443 -0.283636  0.685382 -0.883799
2020-01-07 -1.399984  1.074993  2.123158 -1.260612
'''

'''
选择区块
'''
#选择一列
print(df['B'])
print('-----------------------------------------------------')
'''
2020-01-01    0.891945
2020-01-02    2.377128
2020-01-03   -0.192440
2020-01-04   -0.532504
2020-01-05   -0.222461
2020-01-06   -1.892247
2020-01-07    0.038119
Freq: D, Name: B, dtype: float64
'''

#选择切片行
print(df[2:5])
print('-----------------------------------------------------')
'''
                   A         B         C         D
2020-01-03  0.715916  1.040685 -0.252249  1.149878
2020-01-04  2.537198  1.326299  0.236529  0.434715
2020-01-05 -0.194854 -0.747187 -1.746098 -0.044214
'''

#选择指定索引列
print(df['20200102':'20200104'])
print('-----------------------------------------------------')
'''
                   A         B         C         D
2020-01-02  0.734095  0.169645 -0.603472 -0.242083
2020-01-03  0.032710 -1.220694 -0.729468 -1.235488
2020-01-04 -0.497106  0.788426 -1.369891  1.880373
'''

#使用标签获取横截面
print(df.loc[dates[3]])
print('-----------------------------------------------------')
'''
A   -0.051632
B    0.808223
C    0.177373
D   -0.964961
Name: 2020-01-04 00:00:00, dtype: float64
'''

#通过标签选择多轴
print(df.loc[:,['A','C']])
print('-----------------------------------------------------')
'''
                   A         C
2020-01-01  0.572484 -2.222568
2020-01-02 -0.471049 -0.066402
2020-01-03  0.871071 -0.482459
2020-01-04 -0.594869  1.464591
2020-01-05  1.549068 -0.264029
2020-01-06  1.480404  0.408534
2020-01-07 -1.190651 -0.277256
'''

#标签索引、列切片
print(df.loc['20200105':'20200107',['A','D']])
print('-----------------------------------------------------')
'''
                   A         D
2020-01-05  1.101591  0.411559
2020-01-06 -0.900476  0.765954
2020-01-07  1.226043  0.715211
'''

#获取标量值
print(df.loc[dates[0],'A']) # 等同于print(df.at[dates[0],'A'])
print('-----------------------------------------------------')
# -0.24638543656914844

#通过传递的整数的位置选择
print(df.iloc[3]) #获取第4行
print('-----------------------------------------------------')
'''
A    0.889882
B    0.692542
C   -0.479619
D   -0.913868
Name: 2020-01-04 00:00:00, dtype: float64
'''

print(df.iloc[3:5,0:2]) #获取4-5行和1-2列区块
print('-----------------------------------------------------')
'''
                   A        B
2020-01-04 -1.865529 -0.96187
2020-01-05  0.357673 -1.19363

///////////////////////////////////////////////////
                   A         B         C         D
2020-01-01 -1.942325 -0.845883  0.369837 -1.766348
2020-01-02 -0.484014  0.721922  0.104653  0.393789
2020-01-03 -1.433761  1.227268 -0.546834  0.712306
2020-01-04 -1.865529 -0.961870 -0.226983  1.874741
2020-01-05  0.357673 -1.193630 -0.288687  0.993018
2020-01-06 -1.040124 -1.546254 -0.662235 -0.004456
2020-01-07  0.342040  0.426503  0.320536  0.133426
///////////////////////////////////////////////////
'''

print(df.iloc[[1,2,4],[0,2]])
print('-----------------------------------------------------')
'''
                   A         C
2020-01-02  1.627244 -0.329341
2020-01-03 -0.187080  1.166376
2020-01-05 -1.581689  0.597212
'''

print(df.iloc[1:3,:])
print('-----------------------------------------------------')
'''
                   A         B         C         D
2020-01-02  1.346631 -1.508470  0.815657  0.452263
2020-01-03  1.914901  0.101068 -0.302775 -0.003464
'''

print(df.iloc[:,1:3])
print('-----------------------------------------------------')
'''
                   B         C
2020-01-01  1.080646 -0.188748
2020-01-02  1.267726  0.209058
2020-01-03  0.414781 -0.032133
2020-01-04 -1.448610 -0.493607
2020-01-05  0.308970  0.145514
2020-01-06 -0.137565 -1.750027
2020-01-07  1.227770 -0.426528
'''

#明确获取值
print(df.iloc[1,1]) # 等同于print(df.iat[1,1])
print('-----------------------------------------------------')
# -0.6456159376541846

'''
布尔索引
'''
#使用单列的值来选择数据
print(df[df.A > 0]) #A列大于0的值
print('-----------------------------------------------------')
'''
                   A         B         C         D
2020-01-01  0.105586 -0.173702  0.360643 -1.866179
2020-01-06  2.790227  0.053426 -1.123202  0.573211
'''

print(df[df > 0]) # 获取所有大于0的值，小于0设为NaN
print('-----------------------------------------------------')
'''
                   A         B         C         D
2020-01-01  0.021760  0.467921       NaN  0.442172
2020-01-02       NaN       NaN       NaN       NaN
2020-01-03       NaN       NaN       NaN  0.421954
2020-01-04       NaN       NaN       NaN  0.254046
2020-01-05  0.970615  1.234028  1.920165  0.802954
2020-01-06       NaN       NaN       NaN       NaN
2020-01-07       NaN  0.292532       NaN       NaN
'''

#使用isin()方法进行过滤
df2 = df.copy()
df2['E'] = ['one','one','two','three','four','three','two']
print(df2)
print("============= start to filter =============== ")
print(df2[df2['E'].isin(['two','four'])])
print('-----------------------------------------------------')
'''
                   A         B         C         D      E
2020-01-01 -0.732205 -0.573685  2.288745 -0.758466    one
2020-01-02 -0.442231 -0.824272  1.692133 -1.124513    one
2020-01-03 -0.090896 -0.062158  2.231953  1.797271    two
2020-01-04 -0.408286  0.521264  1.037781 -0.949421  three
2020-01-05 -1.159509 -0.957373 -0.331443 -0.300236   four
2020-01-06  0.942155  1.325302  1.618602 -2.130033  three
2020-01-07  0.762963  0.650497  0.309780  0.077380    two
============= start to filter =============== 
                   A         B         C         D     E
2020-01-03 -0.090896 -0.062158  2.231953  1.797271   two
2020-01-05 -1.159509 -0.957373 -0.331443 -0.300236  four
2020-01-07  0.762963  0.650497  0.309780  0.077380   two
-----------------------------------------------------
'''