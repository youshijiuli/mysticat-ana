import pandas as pd
import numpy as np

'''
pct_change()函数将每个元素与其前一个元素进行比较，并计算变化百分比
默认对列进行操作，通过参数axis=1改为列操作
'''
s = pd.Series([1,2,3,4,5,4])
print (s.pct_change())
print('-----------------------------------------------------')
df = pd.DataFrame(np.random.randn(5, 2))
print(df.pct_change())
print('-----------------------------------------------------')
'''
0         NaN
1    1.000000
2    0.500000
3    0.333333
4    0.250000
5   -0.200000
dtype: float64
-----------------------------------------------------
          0         1
0       NaN       NaN
1  2.881612 -0.812154
2  0.595619  1.206371
3 -1.075366  0.898306
4 -0.280399 -0.258106
-----------------------------------------------------
'''

#cov()协方差适用于系列数据。Series对象有一个方法cov用来计算序列对象之间的协方差。NA将被自动排除
'''
例如:
Xi 1.1 1.9 3
Yi 5.0 10.4 14.6
E(X) = (1.1+1.9+3)/3=2
E(Y) = (5.0+10.4+14.6)/3=10
E(XY)=(1.1×5.0+1.9×10.4+3×14.6)/3=23.02
Cov(X,Y)=E(XY)-E(X)E(Y)=23.02-2×10=3.02 #协方差
此外：还可以计算：D(X)=E(X^2)-E^2(X)=(1.1^2+1.9^2+3^2)/3 - 4=4.60-4=0.6 σx=0.77
D(Y)=E(Y^2)-E^2(Y)=(5^2+10.4^2+14.6^2)/3-100=15.44 σy=3.93
X,Y的相关系数：
r(X,Y)=Cov(X,Y)/(σxσy)=3.02/(0.77×3.93) = 0.9979
表明这组数据X,Y之间相关性很好!
'''
# 序列协方差
s1 = pd.Series(np.random.randn(10))
s2 = pd.Series(np.random.randn(10))
print (s1.cov(s2))
print('-----------------------------------------------------')
'''
0.21299802678433902
'''

# DataFrame协方差方法计算所有列之间的协方差(cov)值
frame = pd.DataFrame(np.random.randn(10,5), columns=['a','b','c','d','e'])
print(frame['a'].cov(frame['b']))
print('-----------------------------------------------------')
print(frame.cov())
print('-----------------------------------------------------')
'''
-0.13992869511771677
-----------------------------------------------------
             =-0.13992869511771677
          a         b         c         d         e
a  0.871644 -0.139929  0.026652 -0.281784  0.021671
b -0.139929  0.845645 -0.118744 -0.018553  0.286899
c  0.026652 -0.118744  1.092101  0.392344  0.241975
d -0.281784 -0.018553  0.392344  1.901593  0.554058
e  0.021671  0.286899  0.241975  0.554058  0.387614
'''

# corr()相关性显示了任何两个数值(系列)之间的线性关系
frame = pd.DataFrame(np.random.randn(10,5), columns=['a','b','c','d','e'])
print (frame['a'].corr(frame['b']))
print('-----------------------------------------------------')
print (frame.corr())
print('-----------------------------------------------------')
'''
-0.6976867146901018
-----------------------------------------------------
          a         b         c         d         e
a  1.000000 -0.697687  0.521538  0.456556 -0.465880
b -0.697687  1.000000 -0.229958 -0.205068  0.055293
c  0.521538 -0.229958  1.000000 -0.020102  0.015775
d  0.456556 -0.205068 -0.020102  1.000000 -0.305630
e -0.465880  0.055293  0.015775 -0.305630  1.000000
'''

#数据排名为元素数组中的每个元素生成排名。在关系的情况下，分配平均等级
s = pd.Series(np.random.randn(5),index=list('abcde'))
print(s)
print('-----------------------------------------------------')
# s['d'] = s['b'] # 强制d和b索引值相同
print(s.rank())
print('-----------------------------------------------------')
'''
a    0.413206
b   -0.307905
c    0.778403
d    0.610322
e   -1.540940
dtype: float64
-----------------------------------------------------
a    3.0
b    2.0
c    5.0
d    4.0
e    1.0
dtype: float64
'''
