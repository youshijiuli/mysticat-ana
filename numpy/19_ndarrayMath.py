import numpy as np

a = np.array([0, 30, 45, 60, 90])
print('不同角度的正弦值：')
# 通过乘pi/180转化为弧度
print(np.sin(a*np.pi/180))
print('数组中角度的余弦值：')
print(np.cos(a*np.pi/180))
print('数组中角度的正切值：')
print(np.tan(a*np.pi/180))
print('-----------------------------------------------------')
'''
不同角度的正弦值：
[0.         0.5        0.70710678 0.8660254  1.        ]
数组中角度的余弦值：
[1.00000000e+00 8.66025404e-01 7.07106781e-01 5.00000000e-01 6.12323400e-17]
数组中角度的正切值：
[0.00000000e+00 5.77350269e-01 1.00000000e+00 1.73205081e+00 1.63312394e+16]
'''

a = np.array([0,30,45,60,90])
print ('含有正弦值的数组：')
sin = np.sin(a*np.pi/180)
print (sin)
print ('计算角度的反正弦，返回值以弧度为单位：')
inv = np.arcsin(sin)
print (inv)
print ('通过转化为角度制来检查结果：')
print (np.degrees(inv))
print ('arccos 和 arctan 函数行为类似：')
cos = np.cos(a*np.pi/180)
print (cos)
print ('反余弦：')
inv = np.arccos(cos)
print (inv)
print ('角度制单位：')
print (np.degrees(inv))
print ('tan 函数：')
tan = np.tan(a*np.pi/180)
print (tan)
print ('反正切：')
inv = np.arctan(tan)
print (inv)
print ('角度制单位：')
print (np.degrees(inv))
print('-----------------------------------------------------')
'''
含有正弦值的数组：
[0.         0.5        0.70710678 0.8660254  1.        ]
计算角度的反正弦，返回值以弧度为单位：
[0.         0.52359878 0.78539816 1.04719755 1.57079633]
通过转化为角度制来检查结果：
[ 0. 30. 45. 60. 90.]
arccos 和 arctan 函数行为类似：
[1.00000000e+00 8.66025404e-01 7.07106781e-01 5.00000000e-01
 6.12323400e-17]
反余弦：
[0.         0.52359878 0.78539816 1.04719755 1.57079633]
角度制单位：
[ 0. 30. 45. 60. 90.]
tan 函数：
[0.00000000e+00 5.77350269e-01 1.00000000e+00 1.73205081e+00
 1.63312394e+16]
反正切：
[0.         0.52359878 0.78539816 1.04719755 1.57079633]
角度制单位：
[ 0. 30. 45. 60. 90.]
'''

'''
numpy.around()函数返回指定数字的四舍五入值
numpy.around(a,decimals)
decimals: 舍入的小数位数。默认值为0。如果为负，整数将四舍五入到小数点左侧的位置
'''
a = np.array([1.0,5.55,123,0.567,25.532])
print('原数组:')
print(a)
print('舍入后:')
print(np.around(a)) #保留整数四舍五入
print(np.around(a,decimals=1)) #保留一位小数四舍五入
print(np.around(a,decimals=-1)) #整数个位数四舍五入
print('-----------------------------------------------------')
'''
原数组:
[1. 5.55 123. 0.567 25.532]
舍入后:
[1. 6. 123. 1. 26.] #保留整数四舍五入
[1. 5.6 123. 0.6 25.5] #保留一位小数四舍五入
[0. 10. 120. 0. 30.] #整数个位数四舍五入
'''

#numpy.floor()返回小于或者等于指定表达式的最大整数，即向下取整
#numpy.ceil()返回大于或者等于指定表达式的最小整数，即向上取整
a = np.array([-1.7,1.5,-0.2,0.6,10])
print('原数组:')
print(a)
print('修改后floor数组:')
print(np.floor(a))
print('修改后ceil数组:')
print(np.ceil(a))
print('-----------------------------------------------------')
'''
原数组:
[-1.7 1.5 -0.2 0.6 10.]
修改后floor数组:
[-2. 1. -1. 0. 10.]
修改后ceil数组:
[-1. 2. -0. 1. 10.]
'''

a = np.arange(9, dtype=np.float).reshape(3,3)
print('第一个数组:')
print(a)
print('第二个数组:')
b = np.array([10,10,10])
print(b)
print('两个数组相加:')
print(np.add(a,b))
print('两个数组相减:')
print(np.subtract(a,b))
print('两个数组相乘:')
print(np.multiply(a,b))
print('两个数组相除:')
print(np.divide(a,b))
print('-----------------------------------------------------')
'''
第一个数组:
[[0. 1. 2.]
 [3. 4. 5.]
 [6. 7. 8.]]
第二个数组:
[10 10 10]
两个数组相加:
[[10. 11. 12.]
 [13. 14. 15.]
 [16. 17. 18.]]
两个数组相减:
[[-10.  -9.  -8.]
 [ -7.  -6.  -5.]
 [ -4.  -3.  -2.]]
两个数组相乘:
[[ 0. 10. 20.]
 [30. 40. 50.]
 [60. 70. 80.]]
两个数组相除:
[[0.  0.1 0.2]
 [0.3 0.4 0.5]
 [0.6 0.7 0.8]]
'''

#numpy.reciprocal()函数返回参数逐元素的倒数。如 1/4 倒数为 4/1
a = np.array([0.25,1.33,1,100])
print('原数组是:')
print(a)
print('调用reciprocal函数:')
print(np.reciprocal(a))
print('-----------------------------------------------------')
'''
原数组是:
[0.25 1.33 1. 100.]
调用reciprocal函数:
[4. 0.7518797 1. 0.01]
'''

#numpy.power()函数将第一个输入数组中的元素作为底数，计算它与第二个输入数组中相应元素的幂
a = np.array([2,4,6])
print('原数组:')
print(a)
print('调用power函数:')
print(np.power(a,2))
print('第二个数组:')
b = np.array([1,2,3])
print(b)
print('再次调用power函数:')
print (np.power(a,b))
print('-----------------------------------------------------')
'''
原数组:
[2 4 6]
调用power函数:
[ 4 16 36]
第二个数组:
[1 2 3]
再次调用power函数:
[2 16 216]
'''

#numpy.mod()计算输入数组中相应元素的相除后的余数。函数numpy.remainder()也产生相同的结果
a = np.array([10,20,30])
b = np.array([3,5,7])
print('第一个数组:')
print(a)
print('第二个数组:')
print(b)
print('调用mod()函数:')
print(np.mod(a,b))
print('调用remainder()函数:')
print(np.remainder(a,b))